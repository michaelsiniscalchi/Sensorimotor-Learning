%%% getLickRates()
%
% PURPOSE: To get mean lick rate for an entire session behavioral within a fixed timerange 
%           pre & post cue.
% AUTHOR: MJ Siniscalchi, 200209
%
% INPUT ARGUMENTS:
%                   'trialData', 'trials': Structures generated by 'getTrialData.m' and
%                       'getTrialMasks.m', respectively.
%                   'binWidth' : Duration from cue to consider in mean lick rate calculation.
%
%---------------------------------------------------------------------------------------------------
function lickRates = getLickRates( trialData, trials, binWidth )

%% LICK RATES PRE- & POST-CUE

lickTimesAll = [trialData.lickTimesLeft, trialData.lickTimesRight]; %Concatentate cell arrays for left and right lick times 

% Overall Lick Rate Pre- & Post-Cue for all Completed Trials
[lickRates.preCue.completed, lickRates.postCue.completed] = ...
    getPeriCueLickRates(lickTimesAll, ~trials.miss, binWidth);

% Pre- and Post-Cue Lick Rates for Comparison of Sound & Action trials
rule = {'sound','action'};
for i = 1:numel(rule)
    [lickRates.preCue.(rule{i}), lickRates.postCue.(rule{i})] = ...
        getPeriCueLickRates(lickTimesAll, getMask(trials,{rule{i},'last20'}), binWidth);
end

% Pre- and Post-Cue Lick Rates at Left and Right Ports in Completed Trials
port = {'lickL','lickR'};
for i = 1:numel(port)
    [lickRates.preCue.(port{i}), lickRates.postCue.(port{i})] = ...
        getPeriCueLickRates(lickTimesAll(:,i), ~trials.miss, binWidth); %Consider data from left & right ports independently
end

% Post-cue lickrates for comparison of hit vs error trials
outcome = {'hit','err'};
for i = 1:numel(outcome)
    [lickRates.preCue.(outcome{i}), lickRates.postCue.(outcome{i})] = ...
        getPeriCueLickRates(lickTimesAll, trials.(outcome{i}), binWidth);
end

%%------- INTERNAL FUNCTIONS -----------------------------------------------------------------------
function [ lickRate_pre, lickRate_post ] = getPeriCueLickRates( lickTimes, trialIdx, binWidth )

unit = 1/(sum(trialIdx)*binWidth); %1/(nTrials*seconds)
lt = [lickTimes{trialIdx,:}]; %Specified lick times
lickRate_pre  = sum(lt >= -binWidth & lt < 0)*unit;
lickRate_post = sum(lt > 0 & lt <= binWidth)*unit;