function fig = plot_trialAvgTimeseries(input,fig_title,xLabel,yLabel)
%%% plot_trialAvgTimeseries
%PURPOSE:   Plot bootstrapped timeseries (eg cellular fluorescence) time-locked to behavioral event.
%
%AUTHORS:   AC Kwan 170515 &
%           MJ Siniscalchi 190322
%
%INPUT ARGUMENTS
%   input:        Structure generated by get_trialBoot().
%   tlabel:       Text to put as title of the plot.
%   xtitle:       Text to put as the label for x-axis.
%
%--------------------------------------------------------------------------

%% Setup
t=input(1).sig{1}.t;
nPanel=numel(input);  %how many panels?

nSig=[];    %how many signals/psth in each panel?
for j=1:nPanel
    nSig(j)=numel(input(j).sig);
end

%set up the y-axis range 
%***FUTURE: do this after plotting by accessing graphics objects and finding global min/max data
getMinMax = @(low,high)...
        [nanmin(low) - 0.1*range([low;high]), nanmax(high)+ 0.2*range([low;high])];  
if isfield(input(1).sig{1},'CI') %if CIs are available, use those to set the range
    templow=[]; temphigh=[];
    for j=1:nPanel
        for k=1:nSig(j)
            templow=[templow; input(j).sig{k}.CI(:,1)]; %Lower CI bound
            temphigh=[temphigh; input(j).sig{k}.CI(:,2)]; %Upper CI bound
        end
    end
    minmaxY = getMinMax(templow, temphigh); %Minimum of CIs for all plots
else
    tempsig=[];
    for j=1:nPanel
        for k=1:nSig(j)
            tempsig=[tempsig; input(j).sig{k}.signal];
        end
    end
    minmaxY = getMinMax(tempsig,tempsig); %Minimum of CIs for all plots
end

%% 
fig = figure;
for j=1:nPanel
    
    subplot(1,nPanel,j); hold on;
    
    % plot the shaded errors
    if isfield(input(1).sig{1},'CI') %if CIs are available, plot them
        for k=1:nSig(j)
            errorshade(t,input(j).sig{k}.CI(:,1),input(j).sig{k}.CI(:,2),input(j).col{k},0.2);
        end
    end
    
    %Plot mean signals
    h=[]; legend_names=[];
    for k=1:nSig(j)
        h(k) = plot(t,input(j).sig{k}.signal(:,1),input(j).linstyle{k},'Color',input(j).col{k});
        %Legend entries
        tempStr = input(j).sig{k}.subset_label;
        tempStr(tempStr=='_') = ' '; %switch delimiter for a <space>
        legend_names{k} = [upper(tempStr(1)) tempStr(2:end)];
    end

    % plot a line at t=0
    plot([0 0],minmaxY,'k','LineWidth',1);
    
    % Figure legend
    leg = legend(h,legend_names); %,'boxoff'
    leg.Box = 'off';
    
    % Labels and title
    title(fig_title);
    xlabel(xLabel); ylabel(yLabel);
    
    % Axis limits and proportions
    ylim(minmaxY);
    xlim([t(1) t(end)]);
    axis square;
    
end