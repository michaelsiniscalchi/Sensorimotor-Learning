%%% getChoiceStats
%PURPOSE:   Analyze choice behavior in the discrim/flexibility task
%AUTHORS:   AC Kwan 170518
%           modified by MJ Siniscalchi 190702
%
%INPUT ARGUMENTS
%   trials:  Structure generated by discrim_getTrialMasks().
%
%--------------------------------------------------------------------------

function stats = calc_choiceStats( trials )

% trials performed (any with a response, excluding misses)
corrL = (trials.left & trials.hit);
corrR = (trials.right & trials.hit);
stats.nTrialsPerformed = sum(~trials.miss);
stats.nHit = sum(corrL) + sum(corrR);
stats.nErr = sum(trials.err);

% overall hit rate
stats.hitRate = (sum(corrL) + sum(corrR))/stats.nTrialsPerformed;

% hit rates for left or right port
stats.hitRateL = sum(corrL)/sum(trials.upsweep & ~trials.miss);
stats.hitRateR = sum(corrR)/sum(trials.downsweep & ~trials.miss);

% hit rate following a certain trial type
trialAfter = [false; trials.hit(1:end-1)];
stats.hitRateAfterHit = sum(trialAfter & (corrL | corrR))/sum(trialAfter & ~trials.miss);
if sum(trials.err) > 0
    trialAfter = [false; trials.err(1:end-1)];
    stats.hitRateAfterErr = sum(trialAfter & (corrL | corrR))/sum(trialAfter & ~trials.miss);
else
    stats.hitRateAfterErr = NaN;
end
trialAfter = [false; trials.miss(1:end-1)];
stats.hitRateAfterMiss = sum(trialAfter & (corrL | corrR))/sum(trialAfter & ~trials.miss);

% fraction miss trials, on trial following a certain trial type
trialAfter = [false; trials.hit(1:end-1)];
stats.missFracAfterHit = sum(trialAfter & trials.miss)/sum(trialAfter);
if sum(trials.err) > 0
    trialAfter = [false; trials.err(1:end-1)];
    stats.missFracAfterErr = sum(trialAfter & trials.miss)/sum(trialAfter);
else
    stats.missFracAfterErr = NaN;
end
trialAfter = [false; trials.miss(1:end-1)];
stats.missFracAfterMiss = sum(trialAfter & trials.miss)/sum(trialAfter);

% d-prime
hitRateLeft = stats.hitRateL;
hitRateRight = stats.hitRateR;
if hitRateLeft==1   %cannot put 0 or 1 as argument for 'norminv' later
    hitRateLeft=0.99;
elseif hitRateLeft==0
    hitRateLeft=0.01;
end
if hitRateRight==1
    hitRateRight=0.99;
elseif hitRateRight==0
    hitRateRight=0.01;
end

stats.dprime=norminv(hitRateLeft)-norminv(1-hitRateRight);
    
%% ---- bias in the overall number of left or right response
stats.fracLeft = sum(trials.left) / (sum(trials.left) + sum(trials.right));

%% ---- analysis of win-stay, lose-switch behavior

oneBack = @(trialMask) [false; trialMask(1:end-1)];

% win-stay, lose-switch
ws = oneBack(trials.hit) &...
    ((oneBack(trials.left) & trials.left) |...
    (oneBack(trials.right) & trials.right)); %if they stay after winning prior trial

ws_denom = oneBack(trials.hit) & ~trials.miss; %only count if they choose on the current trial

ls = oneBack(trials.err) &...
    ((oneBack(trials.left) & trials.right) |...
    (oneBack(trials.right) & trials.left)); %if they switch after losing prior trial

ls_denom = oneBack(trials.err) & ~trials.miss; %only include trials performed

stats.wsRate = sum(ws)./sum(ws_denom); % fraction win-stay out of all wins
stats.lsRate = sum(ls)./sum(ls_denom); % fraction win-stay out of all wins
stats.wslsRate = (sum(ws)+sum(ls))./(sum(ws_denom)+sum(ls_denom)); %fraction win-stay-lose-switch out of all trials

% if there was a response, % of stay
stay = (oneBack(trials.left) & trials.left) | (oneBack(trials.right) & trials.right); %if they stay on the choice for consecutive trials
stay_denom = oneBack(~trials.miss) & ~trials.miss; %only count if they made choices on the current and last trials

stats.stayRate = sum(stay)./sum(stay_denom); % fraction stay

end  