function [ trials ] = getTrialMasks(trialData)
%%% getTrialMasks 
%
% PURPOSE:   Create data structure, 'trials', containing logical masks
%           of size(nTrials,1) for task variables.
% AUTHORS:   MJ Siniscalchi 161214.
%           modified by: MJ Siniscalchi 190701
%
% INPUT ARGUMENTS
%       trialData:  Structure generated by getSessionData(), containing codes from NBS Presentation 
%                       for all events.
%
% OUTPUT VARIABLES
%       trials:     Structure containing these fields, each a logical mask
%                       indicating whether trial(idx) is of the corresponding subset, e.g.,
%                       response==left or cue==upsweep.
%
%---------------------------------------------------------------------------------------------------

%% GET CODES FROM PRESENTATION
[STIM,RESP,OUTCOME,EVENT] = getPresentationCodes(1);

%% GET LOGICAL MASKS FOR TRIALS WITH DISTINCT CHOICES, OUTCOMES, AND RULES
% taskVar = {'cue' 'response' 'outcome' 'rule'}; %For Rule Switching Task
taskVar = {'cue' 'response' 'outcome'}; %Simple Auditory Discrimination

for i = 1:numel(taskVar)
    clear codes;
    switch taskVar{i}
        case 'cue'
            codes.upsweep = [STIM.sound_UPSWEEP,...
                STIM.left_UPSWEEP,...
                STIM.right_UPSWEEP];
            codes.downsweep = [STIM.sound_DNSWEEP,...
                STIM.left_DNSWEEP,...
                STIM.right_DNSWEEP];
        case 'response'
            codes.left = [RESP.LEFT];
            codes.right = [RESP.RIGHT];
        case 'outcome'
            codes.hit =...
                [OUTCOME.REWARDLEFT,...
                OUTCOME.REWARDRIGHT];
            codes.err = [OUTCOME.NOREWARD];
            codes.miss = [OUTCOME.MISS];
        case 'rule'
            codes.sound   =...
                [STIM.sound_UPSWEEP,...
                STIM.sound_DNSWEEP];
            codes.action  =...
                [STIM.left_UPSWEEP,...
                STIM.left_DNSWEEP,...
                STIM.right_UPSWEEP,...
                STIM.right_DNSWEEP];
            codes.actionL =...
                [STIM.left_UPSWEEP,...
                STIM.left_DNSWEEP];
            codes.actionR =...
                [STIM.right_UPSWEEP,...
                STIM.right_DNSWEEP];
            trialData.rule = trialData.cue; %Rule info is multiplexed in presentation codes for cue
    end
    fields = fieldnames(codes);
    for j = 1:numel(fields)
        trials.(fields{j}) = ismember(trialData.(taskVar{i}),codes.(fields{j})); %Generate trial mask for each field in 'codes'
    end
end


%% MASKS FOR PRIOR TRIAL TYPES

types = {'left','right','hit','err'};
for i=1:numel(types)
    trials.(['prior' upper(types{i}(1)) types{i}(2:end)]) = [false;trials.(types{i})(1:end-1)];
end